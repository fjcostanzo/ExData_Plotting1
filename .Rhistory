find.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
?solve
source('~/.active-rstudio-document')
a <- matrix(1:4,2,2)
a
makeCacheMatrix(a)
b <- makeCacheMatrix(a)
b
class(a$get)
class(a)
class(b$get)
class(b)
b$get
b$get()
b$getinverse()
b$setinverse()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
z <- makeVector(1:10)
z$get
z$get()
z$getmean()
z$setmean()
z$setmean(10)
z$getmean
z$getmean()
b$get()
source('~/.active-rstudio-document')
cacheSolve(b)
b$getinverse()
cacheSolve(b)
b$set(matrix(1:9,3,3))
cacheSolve(b)
b$get()
solve(matrix(1:9,3,3))
solve(matrix(1:9,3,2))
solve(matrix(1:16,4,4))
b$set(matrix(c(2,2,3,1),2,2))
b$get()
cacheSolve(b)
b$getinverse()
cacheSolve(b)
source('C:/Users/Frank/Desktop/Data Science/ProgrammingAssignment2/cachematrix.R')
Z <- makeCacheMatrix(C(1,1,4,2,1,5,3,2,5),3,3)
Z <- makeCacheMatrix(matrix(C(1,1,4,2,1,5,3,2,5),3,3))
z$get()
z
Z <- makeCacheMatrix(matrix(C(1,1,4,2,1,5,3,2,5),3,3))
z
z <- makeCacheMatrix(matrix(C(1,1,4,2,1,5,3,2,5),3,3))
z$get
z$get()
z <- makeCacheMatrix(matrix(vector(1,1,4,2,1,5,3,2,5),3,3))
z$get()
z<- makeCacheMatrix(matrix(c(1,3,4,2,5,6,2,3,5),3,3))
z
z$get()
cacheSolve(z)
z$getinverse()
install.packages(ggplot2)
install.packages("ggplot2"")
install.packages("ggplot2")
install.package("ggplot2")
library(ggplot2)
?par
install.packages("lattice")
setwd("C:/Users/Frank/Desktop/Data Science/ExData_Plotting1")
## Reading the Data into R - Set working directory to the directory
## with the household_power_consumption.txt file in it.
## This method uses the "sqldf" package.
##install.packages("sqldf") before running the code.
require("sqldf") # Tells R to use the package
require("data.table")
## SQL code to subsetting the data set
mySql <- "SELECT * from file WHERE Date = '1/2/2007' OR Date = '2/2/2007'"
## Creates data.frame by reading the file in conjuction with the SQL query
myData <- read.csv.sql("household_power_consumption.txt",mySql, sep=";")
## Reads myData as a data.table then
## uses data table processes to add a new variable that combines
## the date and time.
DT <- as.data.table(myData)
DT[,datetime:= as.POSIXct(paste(Date, Time), format="%d/%m/%Y %H:%M:%S")]
## creates a plot that shows the three Sub_meterings in different
## colors.
png("plot3.png", width=480, height=480)
with(DT, {
plot(datetime, Sub_metering_1, type="n",
xlab="", ylab="Energy sub metering")
lines(datetime, Sub_metering_1, col="Black")
lines(datetime, Sub_metering_2, col="Red")
lines(datetime, Sub_metering_3, col="Blue")
legend("topright", lty=1, col=c("Black", "Red", "Blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))})
dev.off()
## Reading the Data into R - Set working directory to the directory
## with the household_power_consumption.txt file in it.
## This method uses the "sqldf" package.
##install.packages("sqldf") before running the code.
require("sqldf") # Tells R to use the package
require("data.table")
## SQL code to subsetting the data set
mySql <- "SELECT * from file WHERE Date = '1/2/2007' OR Date = '2/2/2007'"
## Creates data.frame by reading the file in conjuction with the SQL query
myData <- read.csv.sql("household_power_consumption.txt",mySql, sep=":")
## Reads myData as a data.table then
## uses data table processes to add a new variable that combines
## the date and time.
DT <- as.data.table(myData)
DT[,datetime:= as.POSIXct(paste(Date, Time), format="%d/%m/%Y %H:%M:%S")]
## Creates four plots
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
## Plot of datetime, Global Active Power
with(DT, {
plot(datetime, Global_active_power, type="n",
xlab="", ylab="Global Active Power (killowatts)")
lines(datetime, Global_active_power)})
## Plot of datetime, Voltage
with(DT, {
plot(datetime, Voltage, type="n",
xlab="datetime", ylab="Voltage")
lines(datetime, Voltage)})
## Plot of datetime, the Sub_meterings
with(DT, {
plot(datetime, Sub_metering_1, type="n",
xlab="", ylab="Energy sub metering")
lines(datetime, Sub_metering_1, col="Black")
lines(datetime, Sub_metering_2, col="Red")
lines(datetime, Sub_metering_3, col="Blue")
legend("topright", lty=1, col=c("Black", "Red", "Blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))})
## Plot of datetime, Global Reactive Power
with(DT, {
plot(datetime, Global_reactive_power, type="n",
xlab="datetime", ylab="Global reactive power")
lines(datetime, Global_reactive_power)})
dev.off()
